{"version":3,"sources":["components/settings-button/settings-button.component.jsx","components/label/label.component.jsx","components/settings/settings.component.jsx","components/timer/timer.component.jsx","components/timer-button/timer-button.component.jsx","components/clock/clock.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SettingsButton","_ref","name","effect","onClick","isWorking","react_default","a","createElement","id","concat","toLowerCase","className","Label","children","Settings","duration","idFormat","label_component","settings_button_component","Timer","show","timeLeft","TimerButton","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSettingsClick","state","setState","defineProperty","handleTimerButtons","_this$state","modifiedTime","isStarted","clearInterval","interval","audio","current","pause","currentTime","Break","Session","timerState","initializeInterval","setInterval","handleInterval","_this$state2","formatBreak","moment","minute","seconds","format","formatSession","initialTime","play","newMoment","subtract","React","createRef","_this$state3","settings_component","timer_component","timer_button_component","ref","src","Component","App","clock_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0YAmBeA,SAZQ,SAAAC,GAA0C,IAAvCC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,OAAQC,EAAyBH,EAAzBG,QAAyBH,EAAhBI,UAC/C,OACEC,EAAAC,EAAAC,cAAA,KACEC,GAAE,GAAAC,OAAKR,EAAKS,cAAV,KAAAD,OACW,aAAXP,EAAwB,YAAc,aAExCS,UAAS,gBAAAF,OAA6B,aAAXP,EAAwB,KAAO,QAC1DC,QAAS,kBAAMA,EAAQF,EAAMC,QCJpBU,SAJD,SAAAZ,GAAsB,IAAnBQ,EAAmBR,EAAnBQ,GAAIK,EAAeb,EAAfa,SACnB,OAAOR,EAAAC,EAAAC,cAAA,KAAGC,GAAIA,GAAKK,KC4BNC,SAvBE,SAAAd,GAA4C,IAAzCC,EAAyCD,EAAzCC,KAAMc,EAAmCf,EAAnCe,SAAUZ,EAAyBH,EAAzBG,QAASC,EAAgBJ,EAAhBI,UACrCY,EAAWf,EAAKS,cAEtB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,GAAIQ,GACPX,EAAAC,EAAAC,cAACU,EAAD,CAAOT,GAAE,GAAAC,OAAKO,EAAL,WAAwBf,EAAjC,WACAI,EAAAC,EAAAC,cAACW,EAAD,CACEd,UAAWA,EACXD,QAASA,EACTF,KAAMA,EACNC,OAAO,aAETG,EAAAC,EAAAC,cAAA,QAAMC,GAAE,GAAAC,OAAKO,EAAL,YAAyBD,GACjCV,EAAAC,EAAAC,cAACW,EAAD,CACEd,UAAWA,EACXD,QAASA,EACTF,KAAMA,EACNC,OAAO,gBCXAiB,SATD,SAAAnB,GAAwB,IAArBoB,EAAqBpB,EAArBoB,KAAMC,EAAerB,EAAfqB,SACrB,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACNH,EAAAC,EAAAC,cAACU,EAAD,CAAOT,GAAG,eAAeY,GACzBf,EAAAC,EAAAC,cAAA,KAAGC,GAAG,aAAaa,MCCVC,SARK,SAAAtB,GAA+B,IAA5BQ,EAA4BR,EAA5BQ,GAAIK,EAAwBb,EAAxBa,SAAUV,EAAcH,EAAdG,QACnC,OACEE,EAAAC,EAAAC,cAAA,UAAQC,GAAIA,EAAIL,QAAS,kBAAMA,EAAQK,KACpCK,KCmNQU,qBA9Mb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcRQ,oBAAsB,SAAC/B,EAAMC,GAC3B,OAAQA,GACN,IAAK,WACH,GAAyB,KAArBuB,EAAKQ,MAAMhC,GAAc,OAC7B,OAAOwB,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACJzB,EAAOwB,EAAKQ,MAAMhC,GAAQ,IAE/B,IAAK,WACH,GAAyB,IAArBwB,EAAKQ,MAAMhC,GAAa,OAC5B,OAAOwB,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACJzB,EAAOwB,EAAKQ,MAAMhC,GAAQ,IAE/B,QACE,SA5BawB,EAgCnBW,mBAAqB,SAAA5B,GAAM,IAAA6B,EACWZ,EAAKQ,MAAjCK,EADiBD,EACjBC,aAAcC,EADGF,EACHE,UAEtB,OAAQ/B,GACN,IAAK,QAMH,OAJAgC,cAAcf,EAAKgB,UACnBhB,EAAKiB,MAAMC,QAAQC,QACnBnB,EAAKiB,MAAMC,QAAQE,YAAc,EAE1BpB,EAAKS,SAAS,CACnBY,MAAO,EACPC,QAAS,GACTC,WAAY,UACZT,WAAW,EACXnC,WAAW,EACXkC,aAAc,KAGlB,IAAK,aACH,OAAIA,GAAgBC,GAElBC,cAAcf,EAAKgB,UACZhB,EAAKS,SAAS,CACnBK,WAAW,EACXnC,WAAW,KAINqB,EAAKS,SAAS,CACnBK,WAAYd,EAAKQ,MAAMM,YAG7B,QACE,SAlEad,EAsEnBgB,SAAW,KAtEQhB,EAwEnBwB,mBAAqB,WACnBxB,EAAKgB,SAAWS,YAAY,WAE1BzB,EAAK0B,kBACJ,MA5Ec1B,EA+EnB0B,eAAiB,WAAM,IAAAC,EAC2C3B,EAAKQ,MAA7De,EADaI,EACbJ,WAAYV,EADCc,EACDd,aAAclC,EADbgD,EACahD,UAAW0C,EADxBM,EACwBN,MAAOC,EAD/BK,EAC+BL,QAO9CM,EACM,KAAVP,EACI,QACAQ,MACGC,OAAOT,GACPU,QAAQ,GACRC,OAAO,SAEVC,EACQ,KAAZX,EACI,QACAO,MACGC,OAAOR,GACPS,QAAQ,GACRC,OAAO,SAGVE,EAA6B,YAAfX,EAA2BU,EAAgBL,EAG/D,GAAqB,UAAjBf,EAGF,OAFAb,EAAKiB,MAAMC,QAAQE,YAAc,EACjCpB,EAAKiB,MAAMC,QAAQiB,OACXZ,GACN,IAAK,UACH,OAAOvB,EAAKS,SAAS,CACnBc,WAAY,QACZV,aAAc,KAElB,IAAK,QACH,OAAOb,EAAKS,SAAS,CACnBc,WAAY,UACZV,aAAc,KAElB,QACE,OAKN,GAAoB,UAAhBqB,IAA4BvD,EAC9B,OAAOqB,EAAKS,SAAS,CACnB9B,WAAW,EACXkC,aAAc,UAKlB,IAAMuB,EAAYP,IAAOhB,GAAgBqB,EAAa,SAASG,SAC7D,EACA,WAGF,OAAOrC,EAAKS,SAAS,CACnB9B,WAAW,EACXkC,aAAcuB,EAAUJ,OAAO,YA3IjChC,EAAKQ,MAAQ,CACXa,MAAO,EACPC,QAAS,GACTC,WAAY,UACZT,WAAW,EACXnC,WAAW,EACXkC,aAAc,IAGhBb,EAAKiB,MAAQqB,IAAMC,YAZFvC,wEAkJV,IAAAwC,EAQHrC,KAAKK,MANPa,EAFKmB,EAELnB,MACAC,EAHKkB,EAGLlB,QACAC,EAJKiB,EAILjB,WACAT,EALK0B,EAKL1B,UACAnC,EANK6D,EAML7D,UACAkC,EAPK2B,EAOL3B,aAGIe,EACM,KAAVP,EACI,QACAQ,MACGC,OAAOT,GACPU,QAAQ,GACRC,OAAO,SAEVC,EACQ,KAAZX,EACI,QACAO,MACGC,OAAOR,GACPS,QAAQ,GACRC,OAAO,SAEVpC,EAA0B,YAAf2B,EAA2BU,EAAgBL,EAK5D,OAHId,IAAcnC,GAChBwB,KAAKqB,mBAAmBS,EAAeL,GAGvChD,EAAAC,EAAAC,cAAA,OAAKC,GAAG,SACNH,EAAAC,EAAAC,cAAC2D,EAAD,CACEjE,KAAK,UACLc,SAAUgC,EACV5C,QAASyB,KAAKI,oBACd5B,UAAWA,IAEbC,EAAAC,EAAAC,cAAC2D,EAAD,CACEjE,KAAK,QACLc,SAAU+B,EACV3C,QAASyB,KAAKI,oBACd5B,UAAWA,IAEbC,EAAAC,EAAAC,cAAC4D,EAAD,CAAO/C,KAAM4B,EAAY3B,SAAUiB,GAAgBjB,IACnDhB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACbN,EAAAC,EAAAC,cAAC6D,EAAD,CAAa5D,GAAG,aAAaL,QAASyB,KAAKQ,oBACxCG,EAAY,OAAS,SAExBlC,EAAAC,EAAAC,cAAC6D,EAAD,CAAa5D,GAAG,QAAQL,QAASyB,KAAKQ,oBAAtC,SAGA/B,EAAAC,EAAAC,cAAA,SAAO8D,IAAKzC,KAAKc,MAAOlC,GAAG,OAAO8D,IAAI,mCAxM5BP,IAAMQ,YCGXC,MATf,WACE,OACEnE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,MAAII,UAAU,aAAd,kBACAN,EAAAC,EAAAC,cAACkE,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a2adc332.chunk.js","sourcesContent":["import React from \"react\";\n\n//import necessary styles\nimport \"./settings-button.styles.scss\";\n\n//no state or lifecycle methods needed\n\nconst SettingsButton = ({ name, effect, onClick, isWorking }) => {\n  return (\n    <i\n      id={`${name.toLowerCase()}-${\n        effect === \"increase\" ? \"increment\" : \"decrement\"\n      }`}\n      className={`fas fa-arrow-${effect === \"increase\" ? \"up\" : \"down\"}`}\n      onClick={() => onClick(name, effect)}\n    />\n  );\n};\n\nexport default SettingsButton;\n","import React from \"react\";\n\nimport \"./label.styles.scss\";\n\n//just shows props value\n\nconst Label = ({ id, children }) => {\n  return <p id={id}>{children}</p>;\n};\n\nexport default Label;\n","import React from \"react\";\n\n//import necessary components\nimport SettingsButton from \"../settings-button/settings-button.component\";\nimport Label from \"../label/label.component.jsx\";\n\n//import necessary styles\nimport \"./settings.styles.scss\";\n\n//no need for states, it will just pass it's props to it's own components\n//functional stateless component\n\nconst Settings = ({ name, duration, onClick, isWorking }) => {\n  const idFormat = name.toLowerCase();\n\n  return (\n    <div id={idFormat}>\n      <Label id={`${idFormat}-label`}>{name} Length</Label>\n      <SettingsButton\n        isWorking={isWorking}\n        onClick={onClick}\n        name={name}\n        effect=\"increase\"\n      />\n      <span id={`${idFormat}-length`}>{duration}</span>\n      <SettingsButton\n        isWorking={isWorking}\n        onClick={onClick}\n        name={name}\n        effect=\"decrease\"\n      />\n    </div>\n  );\n};\n\nexport default Settings;\n","import React from \"react\";\n\n//import necessary componenimport { format } from \"util\";\n\nimport Label from \"../label/label.component.jsx\";\n\n//import necessary styles\nimport \"./timer.styles.scss\";\n\nconst Timer = ({ show, timeLeft }) => {\n  return (\n    <div id=\"timer\">\n      <Label id=\"timer-label\">{show}</Label>\n      <p id=\"time-left\">{timeLeft}</p>\n    </div>\n  );\n};\n\nexport default Timer;\n\n//Things to do\n\n/* \n if isStarted is true, start an interval and decrease the amount each time and real time update it\n\n moment from timeLeft \"string\", extract 1 seconds,\n*/\n","import React from \"react\";\n\nimport \"./timer-button.styles.scss\";\n\n//just using it's props and an onClick function\n\nconst TimerButton = ({ id, children, onClick }) => {\n  return (\n    <button id={id} onClick={() => onClick(id)}>\n      {children}\n    </button>\n  );\n};\n\nexport default TimerButton;\n","import React from \"react\";\nimport moment from \"moment\";\n\n//import necessary components\nimport Settings from \"../settings/settings.component\";\nimport Timer from \"../timer/timer.component\";\nimport TimerButton from \"../timer-button/timer-button.component\";\n\n//import necessary styles\nimport \"./clock.styles.scss\";\n\n//this container will pass on necessary information to it's components, hence it will be a class component\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Break: 5,\n      Session: 25,\n      timerState: \"Session\",\n      isStarted: false,\n      isWorking: false,\n      modifiedTime: \"\"\n    };\n\n    this.audio = React.createRef();\n  }\n\n  handleSettingsClick = (name, effect) => {\n    switch (effect) {\n      case \"increase\":\n        if (this.state[name] === 60) return;\n        return this.setState({\n          [name]: this.state[name] + 1\n        });\n      case \"decrease\":\n        if (this.state[name] === 1) return;\n        return this.setState({\n          [name]: this.state[name] - 1\n        });\n      default:\n        return;\n    }\n  };\n\n  handleTimerButtons = id => {\n    const { modifiedTime, isStarted } = this.state;\n\n    switch (id) {\n      case \"reset\":\n        //stop the audio and counting and return to initial state\n        clearInterval(this.interval);\n        this.audio.current.pause();\n        this.audio.current.currentTime = 0;\n\n        return this.setState({\n          Break: 5,\n          Session: 25,\n          timerState: \"Session\",\n          isStarted: false,\n          isWorking: false,\n          modifiedTime: \"\"\n        });\n\n      case \"start_stop\":\n        if (modifiedTime && isStarted) {\n          //means that user wants to stop it\n          clearInterval(this.interval);\n          return this.setState({\n            isStarted: false,\n            isWorking: false\n          });\n        } else {\n          //means that user wants to start the cycle, isStarted is always false in here\n          return this.setState({\n            isStarted: !this.state.isStarted\n          });\n        }\n      default:\n        return;\n    }\n  };\n\n  interval = null; //setting up a property to allow buttons to stop the interval\n\n  initializeInterval = () => {\n    this.interval = setInterval(() => {\n      //setting it's value in here ^\n      this.handleInterval();\n    }, 1000);\n  };\n\n  handleInterval = () => {\n    const { timerState, modifiedTime, isWorking, Break, Session } = this.state;\n\n    //getting formatBreak and formatSession again because\n    //the program only enters the interval once so if you\n    //change the length while timer is on, it won't notice\n    //the changes and continue from initial values\n\n    const formatBreak =\n      Break === 60\n        ? \"60:00\"\n        : moment()\n            .minute(Break)\n            .seconds(0)\n            .format(\"mm:ss\");\n\n    const formatSession =\n      Session === 60\n        ? \"60:00\"\n        : moment()\n            .minute(Session)\n            .seconds(0)\n            .format(\"mm:ss\");\n\n    //take session time if state is session, break time if not\n    const initialTime = timerState === \"Session\" ? formatSession : formatBreak;\n\n    //edge case 1 - need to switch the timer on the next cycle\n    if (modifiedTime === \"00:00\") {\n      this.audio.current.currentTime = 0;\n      this.audio.current.play();\n      switch (timerState) {\n        case \"Session\":\n          return this.setState({\n            timerState: \"Break\",\n            modifiedTime: \"\"\n          });\n        case \"Break\":\n          return this.setState({\n            timerState: \"Session\",\n            modifiedTime: \"\"\n          });\n        default:\n          return;\n      }\n    }\n\n    //edge case 2 - moment.js recognizes 60:00 as 00:00 thus it needs to be hardcoded\n    if (initialTime === \"60:00\" && !isWorking) {\n      return this.setState({\n        isWorking: true,\n        modifiedTime: \"59:59\"\n      });\n    }\n\n    //default case, subtract 1 and change state\n    const newMoment = moment(modifiedTime || initialTime, \"mm:ss\").subtract(\n      1,\n      \"seconds\"\n    );\n\n    return this.setState({\n      isWorking: true,\n      modifiedTime: newMoment.format(\"mm:ss\")\n    });\n  };\n\n  render() {\n    const {\n      Break,\n      Session,\n      timerState,\n      isStarted,\n      isWorking,\n      modifiedTime\n    } = this.state;\n\n    const formatBreak =\n      Break === 60\n        ? \"60:00\"\n        : moment()\n            .minute(Break)\n            .seconds(0)\n            .format(\"mm:ss\");\n\n    const formatSession =\n      Session === 60\n        ? \"60:00\"\n        : moment()\n            .minute(Session)\n            .seconds(0)\n            .format(\"mm:ss\");\n\n    const timeLeft = timerState === \"Session\" ? formatSession : formatBreak;\n\n    if (isStarted && !isWorking)\n      this.initializeInterval(formatSession, formatBreak);\n\n    return (\n      <div id=\"clock\">\n        <Settings\n          name=\"Session\"\n          duration={Session}\n          onClick={this.handleSettingsClick}\n          isWorking={isWorking}\n        />\n        <Settings\n          name=\"Break\"\n          duration={Break}\n          onClick={this.handleSettingsClick}\n          isWorking={isWorking}\n        />\n        <Timer show={timerState} timeLeft={modifiedTime || timeLeft} />\n        <div className=\"buttons\">\n          <TimerButton id=\"start_stop\" onClick={this.handleTimerButtons}>\n            {isStarted ? \"Stop\" : \"Start\"}\n          </TimerButton>\n          <TimerButton id=\"reset\" onClick={this.handleTimerButtons}>\n            Reset\n          </TimerButton>\n          <audio ref={this.audio} id=\"beep\" src=\"https://goo.gl/65cBl1\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from \"react\";\n\nimport \"./App.css\";\n\n//import necessary components\nimport Clock from \"./components/clock/clock.component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-title\">Pomodoro Clock</h1>\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}